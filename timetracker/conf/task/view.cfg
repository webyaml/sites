# filename: conf/task/view.cfg
# path: /task/view

############################################################
##
## 
############################################################

include conf/elements/html-basic.cfg
include conf/elements/html-form.cfg
include conf/elements/html-datatables.cfg
include conf/elements/html-bootstrap-panel.cfg
include conf/settings/db.cfg	

view_name: &view_name "Task"
view: &view
	content:
		-
			process:
				-
					**select
					sql: |
						SELECT
							`customer`.`name` AS customer,
							`customer`.`id` AS customer_id,
							`project`.`name` AS project,
							`project`.`id` AS project_id,
							`activity`.`name` AS activity,
							`task`.`id` AS task_id,
							`task`.`first_start` AS first_start,
							`task`.`last_start` AS last_start,
							`task`.`seconds` AS seconds,
							`task`.`status` AS status
						FROM customer, project, activity, task
						WHERE `task`.`id` = {{path:arg0}}
						AND	`task`.`customer` = `customer`.`id`
						AND	`task`.`project` = `project`.`id`
						AND	`task`.`activity` = `activity`.`id`;						
					reader: record
					result:
						store: task
		-
			**spacer


		-
			**panel_noheader
			width: 8
			content:
				-
					**form
					name: task
					content:
						-
							**div6
							content:
								-
									**h4
									class: 'text-center'
									value: |
										<a href="/customer/view/{{task:customer_id}}">{{task:customer}}</a>
										: <a href="/customer/project/{{task:customer_id}}/{{task:project_id}}">{{task:project}}</a>
										: {{task:activity}}
									
								-
									**h1
									class: 'text-center'
									id: timer
									value: '-- : -- : --'
									
						-
							**div6
							content:									
							
								-
									process:
										**if
										expression: " '{{task:status}}' == 'run' "
										'true':
											content:
												**button
												name: Pause
												attributes:
													class_: "btn btn-lg btn-warning btn-block"
													value: 'True'
										'false':							
											content:
												**button
												name: Resume
												attributes:
													class_: "btn btn-lg btn-success btn-block"
													value: 'True'
								-
									process:
										**if
										expression: " '{{task:status}}' != 'stop' "
										'true':						
											content:
												**button
												name: Stop
												attributes:
													class_: "btn btn-lg btn-danger btn-block"
													value: 'True'
						-
							process:
								**if
								expression: " '{{task:status}}' == 'run' "
								'true':	
									content:
										**div
										content:
												**textarea
												name: note
												label: Note
												required:
												attributes:
													rows: 4												
					postprocess:
						**if
						expression: '{{exists(post:Pause)}}'
						'true':
							-
								**update
								sql: |							
									UPDATE `time` SET `end` = NOW(), `note` = "{{html_encode(post:note)}}" WHERE `time`.`task` = {{task:task_id}} AND `time`.`end` IS NULL;
							-
								**select
								sql: |
									SELECT SUM(TIMESTAMPDIFF(SECOND,`time`.`start`,`time`.`end`)) AS 'seconds'
									FROM `time`
									WHERE `time`.`task` = {{task:task_id}};
								reader: record
								result:
									store: time
							-
								**update
								sql: |							
									UPDATE `task` SET `seconds` = {{time:seconds}}, `status` = 'pause'  WHERE `id` = {{task:task_id}};
								'true':
									type: lib.processors.redirect.Redirect
									url: '#'
						'false':
							**if
							expression: '{{exists(post:Resume)}}'
							'true':
								-
									**insert
									sql: |							
										INSERT INTO `time` 
											(`id`, `task`, `start`, `end`) 
												VALUES 
											(NULL, '{{task:task_id}}', NOW(), NULL);								
								-
									**update
									sql: |							
										UPDATE `task` SET `last_start` = NOW(), `status` = 'run' WHERE `id` = {{task:task_id}};
									'true':
										type: lib.processors.redirect.Redirect
										url: '#'
							'false':
								**if
								expression: '{{exists(post:Stop)}}'
								'true':
									-
										**update
										sql: |							
											UPDATE `time` SET `end` = NOW(), `note` = "{{html_encode(post:note)}}" WHERE `time`.`task` = {{task:task_id}} AND `time`.`end` IS NULL;
									-
										**select
										sql: |
											SELECT SUM(TIMESTAMPDIFF(SECOND,`time`.`start`,`time`.`end`)) AS 'seconds'
											FROM `time`
											WHERE `time`.`task` = {{task:task_id}};
										reader: record
										result:
											store: time
									-
										**update
										sql: |							
											UPDATE `task` SET `seconds` = {{time:seconds}}, `status` = 'stop'  WHERE `id` = {{task:task_id}};
										'true':
											type: lib.processors.redirect.Redirect
											url: '#'						

		-
			**well
			width: 4
			content:				
				**p
				value: |
					Started: {{task:first_start}}</br>
					Last Started: {{task:last_start}}</br>
					Status: {{task:status}}</br>
					Task Id: {{task:task_id}}</br>
					
				#	Customer: {{task:customer}}</br>
				#	Project: {{task:project}}</br>
				#	Activity: {{task:activity}}</br>

		-
			**spacer
		-
			**div
			content:
				-
					**h4
					value: History
					class: page-header
				-
					**spacer			
				-
					process:
						**select
						sql: |
							SELECT 
							DATE_FORMAT(start ,"%y-%m-%d %k:%i:%s") AS start_time,
							DATE_FORMAT(end ,"%y-%m-%d %k:%i:%s") AS end_time,
							TIME_FORMAT(TIMEDIFF(end, start), "%k:%i:%s") AS duration,
							note
							FROM time
							WHERE task = {{path:arg0}}
							ORDER BY start_time
						reader: dict
						result:
							store: times					
					**datatable_js
					id: times
					name: times
					values: '{{json(times)}}'
					columns:
						- 
							data: start_time
							title: start
						#- 
						#	data: end_time
						#	title: end
						- 
							data: duration
							title: Duration
						-
							data: note
							title: Notes



		-
			format: "%Y-%m-%d %H:%M:%S"
			value: |
				<script>
					
					var client_time = new Date().getTime();
					var server_time = new Date("{{date()}}");
					var time_diff = parseInt((server_time - client_time)/1000)
					
					var start_time = new Date("{{task:last_start}}");
					var seconds = parseInt('{{task:seconds}}');
					
					if ("{{task:seconds}}" == "") {
						seconds = 0
					}
					
					if ("{{task:status}}" == "run") {
						var offset = parseInt((client_time - start_time)/1000) + time_diff;
						seconds = seconds + offset;
					}
					
					function timer() {
					
						var toHHMMSS = (secs) => {
						    var sec_num = parseInt(secs, 10)
						    var days = Math.floor(sec_num / 86400) %10
						    var hours = Math.floor(sec_num / 3600) % 24
						    var minutes = Math.floor(sec_num / 60) % 60
						    var seconds = sec_num % 60    
						    return [days,hours,minutes,seconds]
							.map(v => v < 10 ? "0" + v : v)
							.filter((v,i) => v !== "00" || i > 0)
							.join(":")
						}
						
						var output = toHHMMSS(seconds);
						$('#timer').html(output);
						
						seconds = seconds + 1;
					}
				
					$( document ).ready(function() {
					
						if ('{{task:status}}' == 'run') {
						
							setInterval(function(){ 
							      timer();
							}, 1000);							    
						
						} else {
							 timer();
						}
					});
				
				</script>
					
include conf/template_private.cfg			